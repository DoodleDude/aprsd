--------------------------
Preparations for V.2.0 M.0
Version 1.1, etc. 
--------------------------


* Client customisation in /etc/polaric-webapp directory (stylesheets)
     DONE
     
* Index.html -> index.php (make it more dynamic)
     DONE

Channels
--------
* Start experimenting with more than two channels
     DONE
     
* List of listeners to channel, not just two
     DONE
     
* Attributes to channels (from configuration) - style and access
     DONE 

* Proper naming of channels. 
     STARTED

* More generic way to add and configure extra channels in config.

* Associate source channels to stations. 
     DONE
     
* Style attributes to clients
     DONE
     
* Access control and visibility to clients

* Serialisation of channels? IMPORTANT - FILE SAVING IS BROKEN! 
     DONE

* Flexible Gate for routing packets to and between channels? igate --> router

* Router specification

* Server channel framework (a simple APRS-IS?)

* Javax25 (linux kernel) channel. Experiment with soundcard modem. 
     
* Channel code in separate subpackage / subdirectory

     

Mobile servers
--------------

* Support position. Manually. Object RF TX decision based on pos. Consider for version 1.0.5. 

* Support GPS (NMEA stream)

* Tracker module (builtin or special plugin??)

* Configuration parameter to activate mobility support. Indicate in XML (meta tag). 
     

 
Web Server
----------
 
* Replace HTTP server (efficiency, extensibility). The "Simple 
  framework" http://www.simpleframework.org can be a good candidate. 
     DONE. 

* Use Apache frontend for all static files. 
     DONE.
     
* Simplify webserver impl. (esp. Scala part). 
 
* Make it RESTful? Use RESTlets? It is fundamentally restful already, 
  but uses POST method. 



API, Extensibility
------------------

* [C] Javascript external API at client side.
* [C] Javascript plugin arch/API at client side (may need index file to be php).

* Component API, add components in config.
      DONE. 

* Framework for web-interface extensions in Scala. 

* Jar files in a subdirectory - easier to add extra components
      DONE.

* History.Item as standalone class. Trail
      DONE.



Database
--------

* Database setup. Collect simple update events in a database. 
       DONE.
       
* Can this be a plugin module? Database stuff should be completely optional in 1.1, 1.2
  etc.. (core database stuff will be part of core P.S. in later releases).
       DONE.
       
* Some experimentation in external programs/plugins? 
        
* Experimental search functionality/trails - but as external module? 
       DONE.

* [C] Fix/improve GUI for trail search

* Implement mission support - Server side
       STARTED

* [C] Implement experimental mission GUI and start testing



Other. 
-----

* Check out Google Web toolkit: Java->js compiler

* Allow a dynamic number of data channels to be configured. 
  Not just two. 
      STARTED (See above)

* Allow objects with certain attributes (like input channel, callsign) to 
  be visible only for logged in users. 
      STARTED

* Change class hierarchy to support other types of position objects, 
  not just plain APRS. 
      STARTED.
  
* AIS objects and input channel.
    
* Additions to search function?
  
* Permissions (objects, other)? Sender id? Consider simple user profile support? 

* More configurable view profiles?  

* More flexible logging?

* Traffic load statistics (per station). 

* Search - and - change alias/icon

 