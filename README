INSTALLATION OF POLARIC-SERVER ON A UBUNTU/DEBIAN LINUX PLATFORM

Version 1.0.1

This is a description how to install the Polaric Server software on 
a Debian based Linux platform. Polaric Server consists of two main 
components: The APRS daemon (polaric-aprsd) and the Web application. 

If you are unknown to Linux and Apache system administration, I recommend
exploring this a little before attempting to install Polaric Server or
that you get help from a friend. If you plan to put up a server permanently
on the internet, you should know what you are doing, i.e. you should have
at least some knowledge on internet security and firewall setup. You will 
need to login as 'root' to be able to perform the installation. 


APRS DAEMON (POLARIC-APRSD)
---------------------------

The APRS daemon is a server program that processes APRS data (from/to
APRS-IS and/or TNC) and presents it to the web-application (or it may
be set up as an igate). It can function as a backend server for the 
web-application and can respond to HTTP requests and deliver XML-data or 
HTML pages. It is written in Java and Scala. 


1. System requirements: The following software packages (Ubuntu or Debian) 
   should be installed:
   
   * beep
   * sun-java6-bin (or openjdk 6)  
     (is selected automatically when you install scala-library ).
   * librxtx-java (if you are going to use a TNC on a serial port)
   * scala-library 
     (not in Debian Lenny - the package is available in testing/unstable and
      can be installed on lenny-systems).
    
2. Create the directory /usr/local/polaric-aprsd (if it does not exist already).
   Download or copy the tarball (polaric-aprsd.tar.gz) into this directory 
   and unpack it there (you may remove the tarball afterwards): 

     mkdir /usr/local/polaric-aprsd
     cd /usr/local/polaric-aprsd
     tar zxvf polaric-aprsd.tar.gz
     rm polaric-aprsd.tar.gz


3. In polaric-aprsd directory run install-script. It sets up a startup-script 
   and a logrotate script: 

     sh install.sh

4. Edit server.ini (see below) and (re)start the server with the command: 
 
     /etc/init.d/polaric-aprsd restart

Remember to restart the server if you change the configuration (server.ini, 
symbols, etc..)

    

WEB-APPLICATION (MAP-SERVICE)
-----------------------------

This section describes the intallation of the Web frontend on an Apache
server. It mainly consists of Javascript code to be run on clients, but
also some PHP scripts to be run on the server. The Apache webserver is 
also set up as a proxy frontend to the aprs daemon described above.  

1. System requirements: The following software packages (Ubuntu or Debian) 
   need to be installed:

   * apache2
   * php5
   * php5-gd
   * php5-mapscript
    

2. Edit apache2 config:
 
   Run the following commands to install proxy plugins into Apache:
      a2enmod proxy
      a2enmod proxy_http
   
   Add the following to the apache setup, e.g. in /etc/apache2/sites-enabled/000-default
   or in your virtual domain setup:
   ----------------------------------------------------------------------------------
      <ProxyMatch "sec-station|sec-mapdata|addobject|deleteobject|resetinfo|sarmode">
         AuthType Basic
         AuthName "NRRL sporingstjeneste"
         AuthUserFile /usr/local/polaric-aprsd/users
         Require valid-user
      </ProxyMatch>
   
      <Files login.php>
         AuthType Basic
         AuthName "NRRL sporingstjeneste"
         AuthUserFile /usr/local/polaric-aprsd/users
         Require valid-user
      </Files>
       
      ProxyPass /aprs/srv http://localhost:8081
      ProxyPass /aprs/srv/* http://localhost:8081
      ProxyPassReverse /aprs/srv http://localhost:8081
   ----------------------------------------------------------------------------------
   
   If necessary, comment out "Deny from All" in /etc/apache2/mods-enabled/proxy.conf
   
   Note: We assume that DocumentRoot is set to /var/www/ and that the 
   web application is installed under /var/www/aprs.
   
   You should test if login works and in particular, if you really
   are denied access if you type the wrong passord (see below how
   you add users).
   
  
2. Download or copy the the tarball (polaric-webapp.tar.gz) containing the 
   web application to /var/www/aprs and unpack it there: 
    
     cd /var/www
     tar zxvf polaric-webapp.tar.gz
     rm polaric-webapp.tar.gz

3. Make sure that the cache directory has the right owner. In /var/www/aprs: 
    
     chown www-data.www-data kacache2
    
    
4. Apache can be restarted with the command
    
     apache2ctl restart
    
    
    
APRS DAEMON SETUP
-----------------
    
It is important to edit server.ini before activating the daemon. And the important 
thing there is the callsign (identifier). This can be set as follows: 

default.mycall = xxxxx 
(where xxxxx is your callsign)

It is possible to set separate callsigns (identifiers) for the internet-channel, 
the TNC channel, for objects and messages, but usually not necessary. 

To connect to an APRS-IS server, edit the 'inetchannel.host', 'inetchannel.port' 
and 'inetchannel.pass' fields and set 'inetchannel.on = true'. You also have 
to set the correct passcode ('inetchannel.pass') to be allowed to send data 
to APRS-IS.

To use a TNC, you need to set 'tncchannel.port' to the correct device name. 
The set the baudrate, use 'tncchannel.baud'. An old fashioned serial 
port is usually /dev/ttyS0 (corresponds to COM1 in Windows). A USB to serial 
converter is typically /dev/ttyUSB0 or /dev/ttyACM0. This will depend on your 
system and TNC setup.

(some more documentation can be found here: http://hans.priv.no/la7eca/?id=aprsd)


    
ADDING USERS
------------
    
To add a user 'la3t' go to the directory /usr/local/polaric-aprsd and type
   ./polaric-passwd la3t
       
or whatever username you choose. You will be asked to choose a password.
Edit server.ini and put the username in the 'user.update' field and if you want the
user to have full administrator rights, add it to the 'user.admin' field.
   user.update = la3t
   
The values of 'user.update' and 'user.admin' are regular expressions, so you can
set it up to recognize many users. For instance, to allow two users to update: xxx 
and yyy, write 
  user.update = xxx|yyy

Restart the server to make the changes effective.



WEBAPP SETUP
------------

Map-layers (except ka-map layers), default map views and filters can be 
configured in the file:
    /var/www/aprs/mapconfig.js
    
mapconfig.js is a Javascript file, but even if you don't know Javascript very well, 
it should be fairly self-explanatory wrt. the most important configuration options.  

By default, all users have access to ka-map maps that are stored on the server. This 
can be somewhat restricted if you want. See /var/www/aprs/ka-map/config/config.php 
for the ka-map setup. If this access is restricted you may want to add usernames here 
too to grant access to users.

To restrict access, uncomment the line:
   $oAuth = new kaBasicAuthentication(array ( '__all__' => array(....)));

And edit the inner array-list to contain the usernames you want to grant access.



CLIENT START 
------------

To access the web-application, start your web-browser and type
in the url: 

   http://<ip-address-of-server>/aprs

or if the server runs on the same computer:   
   
   http://localhost/aprs


